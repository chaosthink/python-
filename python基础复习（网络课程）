# -*- coding: utf-8 -*-
"""
Created on Sat Jul 20 00:27:12 2019

@author: fangzhaoxing
"""

math_score = input("请输入数学成绩：")
chin_score = input("请输入语文成绩：")
total_score = math_score+chin_score
##因为输入的是字符串，所以识别成字符串，需要对类型进行转化
total_score = int(math_score) + int(chin_score)

##数据结构

names= [1,3.5,7]
names[1]
type(names)
len(names) ##显示长度
#列表可以直接相加
names2 = [1,'dd']
names+names2
names.append('test') ##网列表里追加元素
names
names.insert?
names.insert(2,'dxt') #指定位置插入
names
names.count(1)
names.pop() ###删除列表最后一个元素并返回
names.remove(1) ###指定删除某个元素

###切片
list1=[1,2,3,4,5,6,7]
list1[0:5:2]  ###指定步长切片

###tuples元组
##除元素不可修改外，其他与list差不多

##字典
##字典取数根据key来取，类似于‘text’
###字典中数据是无序的，根据key来定位
dict_test.keys() ###返回字典中的keys
dict_test.values() ##返回字典的值

dict1 = {'中国':'北京','美国':'华盛顿'}
dict2 = {'中国':'北京','美国':'纽约'}
dict1.update(dict2)
dict1  ###根据某个字典的内容更新相应的值
dict1.clear()  ##清空数据

"""
 运算符：
   算数运算符： + - * **平方 /  //整除  % 求余数
    关系运算符： > >= < <= != ==等于
    逻辑运算符： and or not
    赋值运算符： = += 加后赋值 -= 
    成员关系运算符： in not in
"""
"""
作业1： 输入一个年份，判断是否是闰年
作业2： 输入一个4位整数，计算各个位上的数值之和
"""

###定义一个检查是否是闰年的函数
def is_rn():
 x=input('请输入年份:')
 if int(x)%4==0 or int(x)%400==0 :
    return print('您输入的年份是闰年。')
 else:
    return print('非闰年')
is_rn()


#####输入一个数字，计算各个位数上的数字之和
def add_str_num():
  x=input('请输入您的数字:')
  y=len(x)
  i=0
  z=0
  for i in range(len(x)):
    z=int(x[i])+z
  print(z)

add_str_num()



####
###set数据集，无序的，不重复的数据组合，有去重的作用
list1 = [1,3,5,123,34]
set1 = set(list1)##直接将列表转为set集
set1
set2 = set(list2)
##交集
list1 = [1,3,4,56,6]
list2 = [1,4,5,6,3,2]

set1 & set2 
##取交集只能在set里面使用 &表示交集  ^表示去掉两边都有的


###
######控制流语句
def jg_panduan(score):
  if int(score)>=60:
    print('及格')
  else:
    print('不及格')
jg_panduan(61)

###多分支结构
def jg_panduan(score):
  if int(score)>=90:
    print('优秀')
  elif int(score)>=80:
    print('良好')
  else:
    print('一般')
jg_panduan(61)

def login_sys():
  user_name=input('请输入账号:')
  user_password=input('请输入密码:')
  name_list = ['aaa','fangzhaoxing','root','test']
  password_list= {'aaa':123456,'fangzhaoxing':1234,'root':456,'test':12341}
  if user_name in name_list:
    if int(user_password)==password_list[user_name]:
      print('welcome,',user_name)
    else:
      print('wrong password')
  else:
    print('wrong username')

login_sys()

###循环结构、控制代码重复执行
list1 = [1,3,4,5,6,78,8,34,45,6,7,4,67,78,5]
count = 0
while count< len(list1):
    print(list1[count])
    count += 1
else:
    print('end')
    
##在循环中加入条件，当出现某种情况的时候自动中断循环
while count< len(list1):
    print(list1[count])
    if list1[count] == 8:
      break
    count += 1
else:
    print('end')    

#写一个无限循环的语句
def is_rn():
 while True:
  x=input('请输入年份:')
  if x=='quit':
     break
  if int(x)%4==0 or int(x)%400==0 :
     print('您输入的年份是闰年。')
  else:
     print('非闰年')
 print('欢迎下次再来')
is_rn()

###range函数 range(start,end,step)
##右上三角
def print_n_to_n():
  first = list(range(1,10,1))
  second = list(range(1,10,1))
  i=0
  k=0
  for i in range(len(first)):
    print("")
    print(i*"             ",end=" ")
    for k in range(i,len(second),1):
      print(first[i],"*",second[k],"=",first[i]*second[k]," ",end=" ")
    print("\n")
  print('乘法表输出完毕')
print_n_to_n()

####左下三角
def print_n_to_n2():
  first = list(range(1,10,1))
  second = list(range(1,10,1))
  i=0
  k=0
  for i in range(len(first)):
    print("")
    for k in range(i+1):
      print(first[i],"*",second[k],"=",first[i]*second[k]," ",end=" ")
    print("\n")
  print('乘法表输出完毕')
print_n_to_n2()

####循环结构

####循环结构
print(first,end="") ###不进行换行
print(first,end=" ") ###不进行换行且加空格

#简单的嵌套
list4=[[11,13,4,5],[13,664,74],[13,56]]
for i in list4:
    for j in i:
      print(j,end=" ")

##遍历字典
dict1 = {'中国':'北京','美国':'华盛顿','英国':'伦敦'}
dict1.items()

for key in dict1:
    print(key,dict1[key])
    
for k,v in dict1.items():
    print(k,'->',v)
    
###同时获取索引和值
list5 = ['a','c','d','g']
for i,s in enumerate(list5):
    print(i,s)
    
####利用列表和循环获取相应的值
list7 = []  ##定义一个空的列表
for i in list(range(20)):
  if i%2==0:
    list7.append(i)  ##将满足条件的数加入列表
print(list7)

#####使用列表推导
list9 = [i for i in list(range(20))]

list9 = [i for i in list(range(20)) if i%2==0] 
list9

###某种双生遍历方式
list13 = [1,2,3,4,5]
list14 = ['a','b','c','d','e']
list15 = list(zip(list13,list14))
list15

#break结束循环
#continue： 结束当前循环，立即开始下一轮循环
#pass ：占位语句


#####字符串内容
###转义字符
#\n 换行  \t制表符
####如果不想使用转义字符，可以使用r来表示使用原生字符
str1 = 'hello\n\tworld'
str2 = r'hello\n\tworld'
print(str1+str2)

print('他说："今天天气很好"')
print('他说：\'今天天气很好\"')  ##两种方式，1使用不同的引号，或使用转移符

###常用的字符串方法
text = 'apple pen'
text.count('p') ##计数
text.upper()
text.lower() ###小写

'-'.join(text) ###加入元素
text.replace('p','n') ###将某些字符替换掉
text.split()  #将字符串拆分成数个
text.split('l')  ##按某个字符进行拆分
##试一下中文能不能
txt2= '今天天气好晴朗'
txt2.split('天')#### ok中文字符能拆分，且拆分的依据字符会消失

####去掉空格
text3 = '   $#%%***   apple * pen $$   '
text3.strip()  ###只是句首尾的空格去掉了
text3.strip(' *') ##只会去掉两端的
####可以去掉收尾一些讨厌的字符或空格
###c查找子字符串
text3.find('a')
text3.find('a',6) ###从第几个元素开始查找
text3.find('a',15,19) 
###邮箱格式正不正确
def email_right():
  email = input('请输入您的163邮箱:')
  if email.find('@') == -1 or email.find('163.com')== -1 or email.find('@')>email.find('163.com'): 
    print('邮箱格式不正确')
  else:
    print('邮箱格式正确')

msg = 'hello'
msg.endswith('lo') ##判断是否以某字段结尾

##多个字符的一一对应替换
text
tables = text.maketrans('pe','st')  ###首先制造一个映射，pe和st互换
text.translate(tables)  ###再将定义好的转换形式传入translate函数

###字符串输出控制
####print指定分隔符 sep='-'
###指定是否换行 end=""
###格式化输出
name = '张珊'
age = 23 
print('我叫%s,今年%s岁了' %(name,age)) ###使用宏函数
print(f'我叫{name},今年{age}岁了') ###第二种引入方法
print('我叫{},今年{}岁了'.format(name,age)) ###第二种方法在老版python的用法

####
####
#######函数
####利用函数的形参置入一个列表
list1 = [1,34,'fd','dd']
def show(lst):
  for i in lst:
    print(i,end=" ")
show(list1)
###定义一个可变参数的函数
def add(num1,num2,*args):
    sum = num1 + num2
    if len(args)>0 :
        for i in args:
            sum += i
    return sum
add(1,3,5,67)
####args 表示一些不确定长度的值

####函数part2
###全局变量和局部变量
###先遍历局部变量再遍历全局变量，函数内可以访问全局变量

###递归函数
#在一个函数内调用函数本身
###写一个计算阶乘的函数
def factiorial(n):
    if n==0:
        return 1
    else:
        return n* factiorial(n-1)
factiorial(5)

###匿名函数
###lambda 表示匿名函数，冒号前的x表示函数参数，匿名函数只有一个表达式
##不用写return 
###给定一个参数返回参数的平方
fun2= lambda x: x*x
fun2(3)

###内置函数
##逻辑判断函数
list1 = [1,3,4,5,6]
all(list1)  ##判断有零值
any(list1) ##有一个是非零就为TRUe
#判断变量数据类型
a = 12
b = 12.3
isinstance(a, int)

###s数学计算函数
abs(a) ##求绝对值
divmod(a,3) ###返回商和余数
pow(a,2) #求a的2次方
pow(a,2,3) #求a的2次方，并对3求余（模）
round(b)  #求四舍五入
round(b,2)  ###指定第几位

###序列相关的函数
#len range
for x in reversed(list1):
    print(x,end=" ")
###reversed可以对列表进行反转
#sorted排序函数
#zip函数 是拉链函数，可以进行一一对应
for x,y in zip(list1,list2):
    print(x,'>=',y)
###如果长度不一致，会以短的那个为准

#####python的高级特性
##列表推导
[x for x in range(1,11)]    
[x*2 for x in range(1,11)]  ####列表推导时可以对x进行变换
[x for x in range(10,20) if x%x==0] ##列表推导可以对x进行筛选

#生成器，生成一个序列流（用于大数据量生成时） 
#生成器很像一个函数,用yield代替return返回值
def generator():
    yield 1 ###1表示具体的值
    yield 2
    yield 3
###生成器使用方法
var = generator()
next(var)
next(var) ####每次会遍历下一个值

##使用方法2
for x in generator():
    print(x,end=" ")
###调用第三方数据的时候方便使用
    
####高级函数
###参数为函数的函数为高级函数
#map reduce filter sorted
##map
#map(函数，迭代对象)
list1 = [1,2,3]
def fun(x):
    return x*x
list2 = map(fun,list1)
for i in list2:
    print(i,end="*")
###直接把函数写进map里
list2 = map(lambda x:x*5,list1)
for i in list2:
    print(i)

###filter函数
list1 = [1,34,56,6,8,5,23]
list2 = filter(lambda x:x%2==1,list1)
for i in list2:
    print(i)
###filter筛选了部分元素

####reduce ：规约
from functools import reduce
list1 = [1,2,3,4,5]
reduce(lambda x,y:x*y,list1)
#第二种用法
reduce(lambda x,y:x+y,[1,3,5,7,9],10) ###第三个参数指的是初始值，否则从0开始

###sorted
list1 = ["hello",'apple','bar','zoo']
sorted(list1,reverse=True)
sorted(list1,key=lambda x:len(x))  ###定义排序规则


####python的异常
##invalid syntax无效语法
def chufa():
  a = input('请输入除数:')
  b = input('请输入被除数:')
  try:  #有可能出错的代码放在try
    result=int(a)/int(b)
  except ZeroDivisionError: ##捕获异常
    print('分母为0，请重新输入')
  try:
    print('商为:',result)
  except UnboundLocalError:
    print('请重新执行')
    
####else的使用，就不用再写一个try
def chufa():
  a = input('请输入除数:')
  b = input('请输入被除数:')
  try:  #有可能出错的代码放在try
    result=int(a)/int(b)
  except ZeroDivisionError: ##捕获异常
    print('分母为0，请重新输入')
  else:
    print('商为:',result)
chufa()

###捕获多种异常
list1 = [1,2,3,4,5]
list2 = [1,2,4,0,7]

def show(one_list):
    try:
        index=0
        while index<=len(one_list):
            print(10/one_list[index])
            index +=1
    except ZeroDivisionError:
        print('分母不能为0')
    except IndexError:
        print('索引超出下标')
show(list1) ##分别会出现两个错误，1超出下标，2分母为0
show(list2)

##懒人写法，不管啥异常就直接报错
def show(one_list):
    try:
        index=0
        while index<=len(one_list):
            print(10/one_list[index])
            index +=1
    except : ###能捕获所有异常 
        print('分母不能为0或下标越界')
show(list1) ##分别会出现两个错误，1超出下标，2分母为0
show(list2)

###finally的用法
list1 = [1,2,3]

try:
    print(list1[3])
except:
    print('下标越界')
finally:
    print('无论怎么样都会执行')


###自定义异常
class networkerror(RuntimeError): ###在runtimeerror的基础上进行定义
    def _init_(self,arg):
        self.args = arg
    
##使用raise获取异常
try:
    print('执行自己的业务代码')
    if 1==1:
        ###自己创建一个networkerror类型的异常，并抛出
        raise networkerror('bad hostname')
except networkerror as e:  ###把这个异常命名为e
    print(e.args)

#####
######模块

import random  ###随机数模块
print(random.Random()) ####生成一个0，1之间的随机小数
print(random.uniform(10,12))  ###产生指定范围内的随机小数
help(random.uniform)
print(random.randint(1,11)) ##产生指定范围内的随机整数
help(random.randint)

list1 = [1,3,5,6,7,8,4,2,33]
print(random.choice(list1))  ##随机抽取列表中的一个数
print(random.randrange(4,55)) 
random.shuffle(list1)
print(list1)  ##洗牌

###随机抽样
print(random.sample(list1,2)) ###随机抽取两个元素

###math模块，用于数学的模块
import math
print(math.floor(3.98)) ###取整
print(math.ceil(4.4)) ###向上取整

###I/O操作
###input/output
###简单的内置open函数
path = '此路径.csv' ###使用变量传入
f=open('这里填写你的路径.csv','r') ###r表示只读操作，其他标识，r+,w+,a+等
print(f.read())
f.close()

##为文件可以正常关闭，需要写try
try:
    f = open('xxx.csv','r')
    print(f.read())
except:
    print('文件不存在')
finally:
    f.close()
####使内存不会误用
###上面的代码会出错
##可以使用with语句
try:
    
    with open('xx。csv','r') as fs:
        print(fs.read())
except:
    print('文件不存在')
#####执行了文件的打开和关闭
######写入一个文件
content = 'good good study , day day up;
try:
    with open('xx.csv','w') as fs:
        fs.write(content)
except:
    print('文件不存在')
#重复执行的话也会覆盖掉之前的内容
content = 'good good study , day day up;
try:
    with open('xx.csv','a') as fs:
        fs.write(content)
except:
    print('文件不存在')
##每次都会追加进内容
####读取文件，乱码的处理
###中文的编码：gb2312  gbk utf-8
try:
    with open('hello.csv','r',encoding='gbk') as fs:
        print(fs.read())
except:
    print('文件不存在')
    
#####os模块
import os
os.mkdir('abc') ###创建abc文件夹
os.rename('abc','dd')  ##重命名文件夹
os.rmdir('abc2') ###删除文件夹

######json数据解析
import json

product = {'id':'1001','name':'iphone','price':5986.50} 
####将上述数据保存到json文件中
with open('product.json','a') as file:
    json.dump(product,file)
    print('写入成功')

###从json中读取数据，并保存
with open('product.json','r') as file:
    pro = json.load(file)
    print(pro)
    print(product['id'])
    

####时间跟时间处理的部分缺失
###主要是三部分 time 和datetime的使用
    
###类和对象的理解
####类和对象相当于提供一种自己定义的数据结构，并且给这种歌数据结构赋予操作方式
####使得对象变得灵活
class  person:   ###定义一个类叫做person
    name = '登记规定'   #@##类中的变量（实例变量）
    age = 21
    gender = 'm'

    def info(self):     ###定义一种操作方法叫做info
        print(person.name,person.age,person.gender)
        
p1 = person()  ###把p1定义为person  ###实例化对象
p1.info()   ##显示类的信息
p1.name
###数据的表现表现为变量，数据的处理方法表现为函数

#####如何在类里定义类变量
class Person:  #首字母大写
    ###定义类变量
    total_person = 0  ###类变量
    
    def __init__(self):  ###self是必须的。表示person的实例化 
        ###在这个函数内，定义实例变量并赋初始值
        self.name = 'zhangsan' 
        self.age = 21 
        self.gender = 'm'
        
    def info(self):     ###定义一种操作方法叫做info
        print(self.name,self.age,self.gender)
        
#####上面的定义方法有缺陷，，变量写死了，可以换一种方法
class Person:  #首字母大写
    ###定义类变量
    total_person = 0  ###类变量
    
    ###构造器，将构造该类的对象实例时，此方法会被自动调用
    ##构造器的主要作用是对实例变量就行初始化
    ####参数self代表该方法所在的对象实例本身，比如p1/p2
    def __init__(self,name,age,gender):  ###self是必须的。表示person的实例化 
        ###在这个函数内，定义实例变量并赋初始值
        self.name = name
        self.age = age 
        self.gender = gender
        self.salary = 0
        Person.total_person += 1
        
    def info(self):     ###定义一种操作方法叫做info
        print(self.name,self.age,self.gender,self.salary)
    
    def add(self,factor):
        self.salary = round(self.salary*(1+factor))
        
###开始调用这个类
p1 = Person('zhangsan',33,'M')
p2 = Person('lishi',23,'F')
####分别调用两个对象的方法
print('现有员工有：',Person.total_person)
 
p1.salary = 10000
p1.add(0.2)
p2.info()
p1.age +=1  ####可以改变p1的值

####面向对象的三大特征： 封装、继承和多态 

####继承
####继承父类的功能
class ForeignPerson(Person):
    country = ""
    def __init__(self,name,age,gender,country):
        super().__init__(name,age,gender)
        self.country = country

p1 = ForeignPerson('mike',22,'M','USA')
p1.country
####继承类父类的基础，并加上了国籍
####方法重写

class ForeignPerson(Person):
    country = ""
    def __init__(self,name,age,gender,country):
        super().__init__(name,age,gender)
        self.country = country
        
    def info(self):     ###定义一种操作方法叫做info
        print(self.name,self.age,self.gender,self.salary)
        print('I am come from',self.country)
    
p1 = ForeignPerson('mike',22,'M','USA')
p1.info()
###同样的info方法，可能有不同的调用结果，就叫做多态

####析构，销毁一个对象
class ForeignPerson(Person):
    country = ""
    def __init__(self,name,age,gender,country):
        super().__init__(name,age,gender)
        self.country = country
        
    def info(self):     ###定义一种操作方法叫做info
        print(self.name,self.age,self.gender,self.salary)
        print('I am come from',self.country)
    
    def __del__(self):
        print(self.name,'已删除记录')
p1 = ForeignPerson('mike',22,'M','USA')
p1.info()
del p1

#####练习
###编写一个代表银行账户的类，并测试功能
###银行账户主要的数据
####卡号，余额、姓名
###对数据的操作有，存款、取款、读取卡号
class bank_account:
    def __init__(self,cust_name,card_no):
        self.cust_name = cust_name
        self.card_no = card_no
        self.balance = 0
        self.acc_status = 'ACTIVE'
        self.acc_level = 'B'
    
    #####打印账户信息
    def acc_info(self):
        print('尊敬的客户:',self.cust_name,'您好！')
        print('您的卡号是：',self.card_no)
        print('您的余额为:',self.balance)
    
    def load_card_no(self):
        print('您的卡号是：',self.card_no)
        print('您的账户等级为：',self.acc_level)
        
    def take_cash(self,amount):
        #####执行取款操作
        if amount> self.balance:
            print('您的余额不足')
        else:
            print('您的取款金额为：',amount)
            self.balance-= amount
        balance_new = input('如果您想查询余额，请输入Y：')
        if balance_new in ('Y','y','yes','YES','Yes'):
            return self.balance
        else:
            print('祝您生活愉快！')
            
    def keep_cash(self,amount):
        #####执行取款操作
        print('您的存款金额为：',amount)
        self.balance+= amount
        balance_new = input('如果您想查询余额，请输入Y：')
        if balance_new in ('Y','y','yes','YES','Yes'):
            return self.balance
        else:
            print('祝您生活愉快！')
           
cust1 = bank_account('王大友','962134244')
cust1.acc_info()
cust1.load_card_no()
cust1.take_cash(500)
cust1.keep_cash(500)
