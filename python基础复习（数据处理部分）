# -*- coding: utf-8 -*-
"""
Created on Fri Aug  9 17:32:35 2019

@author: fangzhaoxing
"""

#####numpy

####对比列表认识数组

import numpy as np

lst = [10,20,30,40]

###创建数组
arr = np.array([10,20,30,40])
arr
lst
#####索引方式相同
lst[0]
arr[0]
###切片方式相同
lst[3:]
arr[3:]

###列表与数组的不同

####数组不能放不同类型的元素
####列表可以

arr.dtype  ####查看数据类型
arr[-1] = np.int32(1.09) ###添加相同数据类型的数值

####数组的创建
arr2=np.array(lst)

###创建2维数组
lst2 = ([5,6,7,8,9],[4,3,2,1,0])
arr2 = np.array(lst2)
lst2
arr2

###创建全为0或全为1的数
np.zeros(5,dtype=float)
np.ones(5,dtype=float)
np.zeros((2,3))

a= np.empty(4)
a
#$#$##填充某个数
a.fill(5)
##生成数组
np.arange(6)
###创建等差数列
np.arange(0,30,10)
###0-1的5个随机数 标准正太分布
np.random.randn(5)
np.random,normal(10,2,(3,5))  ###均值为10，标准差为2，3行5列

arr= np.arange(10)
arr[5]
arr[5:] ###切片，从5到最后
arr[4:7] = 666  ##切片出来修改
arr

####定义一个函数
def f(x,y):
    return 10*x+y
###这里导入的x和y分别是数组下标的小河y
arr2 = np.fromfunction(f,(5,4),dtype=int)
arr2
arr2[1]
arr2[2:4]  ###切三四行
arr2[0:2,1:4]
####便捷写法
arr2[:2,1:]
####把每一行的取出来
for row in arr2:
    print(row)
###  数组的镜像与复制
arr=np.arange(10)
arr[4:7] = 888,666,888
arr
arr_ps=arr[4:8]
arr_ps
arr_ps[0:3] = 666
arr   ###切片的时候，赋值给另一个变量，镜像数据也会跟着改变
arr_pss = arr[4:8].copy()  ####这样就不会链接到一起

####数组的变换
###切成两组
arr.reshape(2,5)
arr

arr=np.arange(8)
arr3= arr.reshape(2,2,2).copy()

#$###数组的其他属性
arr.size   ###
arr.ndim   ###查看维度
arr.shape  ###有几行
arr3.size   ###
arr3.ndim   ###查看维度
arr3.shape  ###有几行

#####数组的运算
arr1 = np.arange(4)
arr2 = np.arange(10,14)
arr2+arr1
arr2*arr1
np.sqrt(np.arange(1,11))
arr1[1:].sum()
arr1[:1].sum()

arr4 = np.arange(10)
arr5 = arr4.reshape(2,5)
arr5
#####按行求和、求均值等
arr5.sum(axis=1)
arr5.mean(axis=1)
####按列求
arr5.sum(axis=0)
arr5.mean(axis=0)

###c常用的数组方法
arr=np.arange(15).reshape(3,5)
arr
###转置
arr.T  ##转成五行三列

####用于布尔数组的方法
bools = np.array([False,True,True,True,False])
bools
bools.any()  ####  是否存在任一的真值
bools.all()  ###是否全为真值

####排序
from numpy.random import randn
arr = randn(7)
arr.sort()
arr= randn(5,3)
arr.sort(1)
arr

####判断是否唯一
names = np.array(['zs','ls','ww','zs','ls'])
up.unique(names)  ###简单的去重

arr1 = np.array([4,5,6,2,5,7,4,0])
arr2 = np.array([1,2,3,4,7,8,4,3])
np.in1d(arr1,[1,5,6])  ####返回某个值是否在某个列表里
np.intersect1d(arr1,arr2)  ###查找交集并排序
np.union1d(arr1,arr2)   ###返回并集

#####numpy的广播
arr1 = np.arange(3)
arr1+5

arr2 = np.ones((3,3))
arr2

arr1+arr2  ##广播填充

arr3 = arr1.reshape(3,1)

arr4 = arr1+arr3   ####按照维度进行广播

####线性代数
####更强大的数学功能
###scipy.special模块
s = np.linspace(0,2*np.pi,100)   ###0到2pi之间取100个点
y = np.sin(s)

v1 = np.array([2,3,4])
v2 = np.array([1,2,3])

v1*v2
####矩阵点乘
np.dot(v1,v2)

arr3 = np.arange(6).reshape(2,3)

np.dot(arr3,v1)

np.dot(arr3,arr3.T)  ###矩阵相乘

#######
######
#######
"""
   pandas

"""

######
""""
主要  series 和  pandas
"""

import pandas as pd

ser = pd.Series(np.random.randn(5))  #####会自动生成一个从0开始的索引

ser = pd.Series(np.random.randn(5), index=['a','b','c','d','e'])  ###指定索引，长度要跟值的数量一致


d = {'a':0,'b':1,'c':2}
ser2 = pd.Series(d)   ####列表可以穿到np里做数组，字典可以传入pd里当做series

pd.Series(3,index=['a','b','c'])  ####使用标量进行传值必须手工加上索引

pd.Series([1,2,'b'],index=['a','b','c'])  ####seriers里可以有不同的类型

ser.values  ####提取数的方法

ser.index ####查看索引
ser[ser>ser.mean()]

np.exp(ser)
ser['a']  #####可以用key值判断

'c' in ser  ###判断的方式
ser[:-1]  ##去掉最后一行 
###series计算的时候会对齐标签，标签不一致的部分不会相加

#####属性
####series 的名称属性
ser = pd.Series(np.random.randn(5),name='mysheet')
####可以用rename进行改名
ser.index.name = 'index_name' ####索引也可以加名字

####数据框
####dataframe
d = {'one':pd.Series([1,2,3],index=['a','b','c']),'two':pd.Series([1,2,3,4,5],index=['a','b','c','d','e'])}
df = pd.DataFrame(d)

####只要求中的部分
pd.DataFrame(d,index=['a','b','c'])  ####只要部行
pd.DataFrame(d,index=['a','b','c'],columns=['one','two'])  ####只要部行，和部分列 ,挑出部分行
df.columns

df['three']=df['one']* df['two'] ##直接添加列
 
del df['two']  ####删除某个列
df.pop('three')  ##删除某个列并返回列表

df.insert(0,'zero','df['one'])   ###在指定位置插入某列

####dataframe的运算

index = pd.date_range('16/7/2018',periods=7)
df = pd.DataFrame(np.random.randn(7,3),index=index,columns=['A','B','C'])

####PANDA读取文件
df = pd.read_csv("") 
df.head()  ####默认前5个，可以自己写呀要显示几个
df.tail()  #####后5条)

#####读取excel文件
df_excel = pd.read_excel("",sheet_name='Sheet1')  ###可以指定sheet的名字

df.to_csv(""，encoding='utf-8')   ####保存数据
df.to_excel()  ###用法同上

60-pandas-puzzles


#####pandas下部分
 ####数据信息概况
 import numpy as np
 import pandas as pd
df2 = pd.read_csv('C:\\Users\\fangzhaoxing\\Desktop\\occu.csv',sep='|')
df2.head()
df2.shape  #####  查看维度
df2.columns ####查看列名
df2.describe()   ####默认只对数值型描述统计
df2.describe(include='all')   ####对所有变量进行描述
df2.info()  ###变量信息概览
df2.tail(3)   ###查看最后几行
df2['age'].head() ####查看某些行

######索引合筛选
df2.loc[df2.age==28,]   ###单条件筛选
df2[df2.age==28]   ###单条件筛选，单不能选行
df2.loc[(df2.age==28) & (df2.gender == 'M'),:] ###x多条件索引
df2.loc[(df2.age==28) & (df2.gender == 'M'),['age','gender']]  ####多条件切选部分行

df2.drop('name',axis=1) ###删除某些数据集
df2.rename(columns = {'age':'ages'})  ####对字段的重命名，注意不会更改原数据集
df2.rename(columns = {'age':'ages'}，inplace = True)  ####对字段的重命名，使用inolace后会更改原数据集
 
###数据类型的转化
data = pd.DataFrame({'id':range(4),'age':['27','28','30','26'],'outcome':['13.3','18.8','8.5','20.5']})
data.dtypes
data = data.astype({'age':'int','outcome':'float'})  ####数据类型的转化

###排序
data.sort_values('outcome')

#$#数据去重
data2 = pd.DataFrame({'id':[1,2,3,2],'age':[23,28,21,28],'gender':['M','F','F','M']})
data2
data2.drop_duplicates()  ####去重并返回

pd.crosstab(index=data2.gender,columns=data2['age'])  #$####交叉列联表

####缺失值的处理
data3  = pd.DataFrame({'id':[1,np.nan,3,2],'age':[23,28,21,np.nan],'gender':['M','F','F','M']})
data3.fillna(method='ffill')  ####向上填充
data3.fillna(method='bfill')  ###向下填充
data3.fillna(value = {'id':data3.id.mean(),'age':data3.age.median()})

####缺失值的运算
###缺失值的运算会忽略掉

####缺失值的处理 fillna
####1.使用标量进行填补
data3.fillna(0)  ####填充为0
data3.fillna(method='bfill')  ###向后填充
data3.fillna(method='bfill',limit =1)  ###向后填充,只填充一位









